From 18239b2aecec79ea35b6b1c4cbc7e2761b2a35b7 Mon Sep 17 00:00:00 2001
From: Simon Fels <simon.fels@canonical.com>
Date: Wed, 22 Jun 2022 17:20:00 +0200
Subject: [PATCH] Preload libgcc_s.so.1 on arm64 systems

The arm64 binary of libnvidia-ml.so.1 is linked against libgcc_s.so.1
whereas the x86_64 binary is not. Due to this, when nvidia-container-cli
is invoked with a rootfs path different than / (as in the case of the
LXD snap) we will end up failing to setup the container environment with
the following error:

lxc c0 20220622134550.154 DEBUG    conf - conf.c:run_buffer:310 - Script exec
  /snap/lxd/current/lxc/hooks/nvidia produced output: nvidia-container-cli.real:
lxc c0 20220622134550.154 DEBUG    conf - conf.c:run_buffer:310 - Script exec
  /snap/lxd/current/lxc/hooks/nvidia produced output: initialization error:
    load library failed: /lib/aarch64-linux-gnu/libc.so.6: version `glibc_2.35'
      not found (required by /lib/aarch64-linux-gnu/libgcc_s.so.1)

This does not occur for other container manager (e.g. docker) as they
typically run with the rootfs they come from being the host one. In case
of the LXD snap that is not the case. Snaps use a base snap to define
their rootfs. This give us the situation with the LXD snap from
5.0/stable using the core20 base snap where LXD is running against an
Ubuntu 20.04 rootfs (from the core20 snap) on an Ubuntu 22.04 host. The
NVIDIA driver here is installed on the 22.04 host. nvidia-container-cli
sits within the LXD snap and will chroot to the host. If libgcc_s.so.1
is not preloaded, it will now fail with the error above.

Preloading libgcc_s.so.1 as it's done for other dependencies already
fixes the problem.

See https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-510/+bug/1971978
for more details.

Signed-off-by: Simon Fels <simon.fels@canonical.com>
---
 src/driver.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/driver.c b/src/driver.c
index a512361..706f141 100644
--- a/src/driver.c
+++ b/src/driver.c
@@ -128,6 +128,14 @@ driver_init_1_svc(ptr_t ctxptr, driver_init_res *res, maybe_unused struct svc_re
                         goto fail;
                 if (xdlopen(err, "libpthread.so.0", RTLD_NOW) == NULL)
                         goto fail;
+#if defined(__aarch64__)
+                /* libnvidia-ml.so.1 depends on libgcc_s.so.1 in its arm64 build. Not
+                 * preloading here will cause unresolved symbols when chrooting into the
+                 * container environment
+                 */
+                if (xdlopen(err, "libgcc_s.so.1", RTLD_NOW) == NULL)
+                        goto fail;
+#endif
 
                 if (chroot(ctx->root) < 0 || chdir("/") < 0) {
                         error_set(err, "change root failed");
-- 
GitLab

